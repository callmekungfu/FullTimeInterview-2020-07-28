import { Component, OnInit } from '@angular/core';
import { RequestrService } from 'src/app/services/requestr.service';
import { HttpResponse } from '@angular/common/http';

const urls = {
  books: 'https://anapioficeandfire.com/api/books',
};

// Generated by https://quicktype.io

export interface Character {
  url: string;
  name: string;
  gender: string;
  culture: string;
  born: string;
  died: string;
  titles: string[];
  aliases: string[];
  father: string;
  mother: string;
  spouse: string;
  allegiances: string[];
  books: string[];
  povBooks: any[];
  tvSeries: string[];
  playedBy: string[];
}

export interface Book {
  url: string;
  name: string;
  isbn: string;
  authors: string[];
  numberOfPages: number;
  publisher: string;
  country: string;
  mediaType: string;
  released: string;
  characters: string[];
  povCharacters: string[];
  characterPage?: number;
  characterDatas: Character[];
}

@Component({
  selector: 'app-books',
  templateUrl: './books.component.html',
  styleUrls: ['./books.component.scss'],
})
export class BooksComponent implements OnInit {
  readonly CHARACTER_PAGE_SIZE = 12;
  books: Book[];
  pageNumber = 1;
  constructor(private requestr: RequestrService) {}

  ngOnInit() {
    this.fetchBooks(1);
  }

  async fetchBooks(page: number, pageSize = 10) {
    try {
      const res: HttpResponse<Book[]> = await this.requestr.get(
        urls.books,
        null,
        {
          page,
          pageSize,
        }
      );
      this.books = this.initializeBookData(res.body);
      this.books.forEach((b) => this.fetchCharacters(b));
    } catch (e) {
      alert('Error Occured when fetching books');
    }
  }

  async fetchCharacters(book: Book) {
    const page = book.characterPage;
    const start = page * this.CHARACTER_PAGE_SIZE;
    const end = (page + 1) * this.CHARACTER_PAGE_SIZE;

    const res = await Promise.all(
      book.characters.slice(start, end).map((c) => this.requestr.get(c))
    );
    const characters: Character[] = res.map((r) => r.body);
    if (!book.characterDatas) {
      book.characterDatas = characters;
    } else {
      book.characterDatas = [...book.characterDatas, ...characters];
    }
    book.characterPage = page + 1;
  }

  private initializeBookData(books: Book[]) {
    return books.map((b) => ({ ...b, characterPage: 0 }));
  }
}
